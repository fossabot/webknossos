defaults: &defaults
  machine: true
  environment:
    USER_NAME: circleci
    USER_UID: 1001
    USER_GID: 1001
    TZ: Europe/Berlin

version: 2
jobs:
  build_test_deploy:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build webknossos-dev docker image
          command: |
            docker pull scalableminds/webknossos-dev:$CIRCLE_BRANCH || true
            DEV_CACHE=$CIRCLE_BRANCH docker-compose build base
            docker image save -o webknossos-dev.tar scalableminds/webknossos-dev

      - run:
          name: Prepare dependency folders
          command: mkdir -p project/target target ~/.m2 ~/.ivy2 ~/.sbt ~/.yarn-cache
      - restore_cache:
          keys:
            - cache-{{ checksum ".circleci/cache_version" }}-{{ .Branch }}
            - cache-{{ checksum ".circleci/cache_version" }}-master
      - restore_cache:
          keys:
            - yarn-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Assert unique evolution numbers
          command: tools/postgres/assert_unique_evolution_numbers.sh
      - run:
          name: Install frontend dependencies
          command: docker-compose run base yarn install --frozen-lockfile
      - run:
          name: Assert schema.sql and evolutions are equal
          command: |
            docker-compose up -d postgres
            sleep 3
            docker-compose run compile tools/postgres/diff_schema.js tools/postgres/schema.sql "conf/evolutions/*.sql"
      - run:
          name: Build frontend documentation
          command: docker-compose run base yarn run docs
      - run:
          name: Build webknossos (sbt and webpack)
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker-compose run compile sbt clean compile stage
            else
              docker-compose run compile sbt compile stage
            fi
      - run:
          name: Build webknossos-datastore (sbt)
          command: docker-compose run base sbt "project webknossosDatastore" compile stage

      - save_cache:
          key: cache-{{ checksum ".circleci/cache_version" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - "project/target"
            - "target"
            - "~/.m2"
            - "~/.ivy2"
            - "~/.sbt"

      - save_cache:
          key: yarn-cache-{{ checksum "yarn.lock" }}
          paths:
            - "~/.yarn-cache"

      - run:
          name: Build webknossos docker image
          command: |
            DOCKER_TAG=${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM} docker-compose build --pull webknossos
            docker image save -o webknossos.tar scalableminds/webknossos:${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM}

      - run:
          name: Build webknossos-datastore docker image
          command: |
            DOCKER_TAG=${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM} docker-compose build --pull webknossos-datastore
            docker image save -o webknossos-datastore.tar scalableminds/webknossos-datastore:${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM}

      - save_cache:
          key: v2-node_modules-{{ checksum "yarn.lock" }}
          paths:
            - "node_modules"

      - save_cache:
          key: webknossos-tar-{{ .Revision }}
          paths:
            - "webknossos.tar"

      - save_cache:
          key: webknossos-datastore-tar-{{ .Revision }}
          paths:
            - "webknossos-datastore.tar"

      - save_cache:
          key: webknossos-dev-tar-{{ .Revision }}
          paths:
            - "webknossos-dev.tar"

  validate:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
            - webknossos-dev-tar-{{ .Revision }}

      - restore_cache:
          keys:
            - v2-node_modules-{{ checksum "yarn.lock" }}

      - restore_cache:
          keys:
            - cache-{{ checksum ".circleci/cache_version" }}-{{ .Branch }}-{{ .Revision }}

      - run: |
          docker image load -i webknossos-dev.tar

      - run:
          name: Lint frontend code
          command: docker-compose run base bash -c "yarn run lint && yarn run am-i-pretty"
      - run:
          name: Run frontend tests
          command: docker-compose run base yarn test-verbose
      - run:
          name: Run backend tests
          command: docker-compose run backend-tests
      - run:
          name: Run end-to-end tests
          command: |
            for i in {1..3}; do # retry
              docker-compose run e2e-tests && s=0 && break || s=$?
            done
            (exit $s)
      - run:
          name: Validate frontend types with flow
          command: docker-compose run base yarn flow

  smoke_tests:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
            - webknossos-tar-{{ .Revision }}
      - restore_cache:
          keys:
            - webknossos-datastore-tar-{{ .Revision }}

      - run: |
          docker image load -i webknossos.tar
          docker image load -i webknossos-datastore.tar

      - run:
          name: Start webknossos
          background: true
          command: DOCKER_TAG=${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM} docker-compose up webknossos
      - run:
          name: Run webknossos smoke test
          command: |
            sleep 10
            ./test/infrastructure/deployment.bash
      - run:
          name: Stop webknossos
          command: docker-compose down --volumes --remove-orphans

      - run:
          name: Start webknossos-datastore
          background: true
          command: DOCKER_TAG=${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM} docker-compose up webknossos-datastore
      - run:
          name: Run webknossos-datastore smoke test
          command: |
            sleep 10
            curl --fail --retry 3 --max-time 15 -v http://localhost:9090/data/health
      - run:
          name: Stop webknossos-datastore
          command: docker-compose down --volumes --remove-orphans

  push:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
            - webknossos-dev-tar-{{ .Revision }}
      - restore_cache:
          keys:
            - webknossos-tar-{{ .Revision }}
      - restore_cache:
          keys:
            - webknossos-datastore-tar-{{ .Revision }}

      - run: |
          docker image load -i webknossos-dev.tar
          docker image load -i webknossos.tar
          docker image load -i webknossos-datastore.tar

      - run:
          name: Push docker images
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            if [ -n "$CIRCLE_TAG" ]; then
              docker tag \
                scalableminds/webknossos:${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM} \
                scalableminds/webknossos:$CIRCLE_TAG
              docker push scalableminds/webknossos:$CIRCLE_TAG
              docker tag \
                scalableminds/webknossos-datastore:${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM} \
                scalableminds/webknossos-datastore:$CIRCLE_TAG
              docker push scalableminds/webknossos-datastore:$CIRCLE_TAG
            fi
            if [ -n "$CIRCLE_BRANCH" ]; then
              docker tag \
                scalableminds/webknossos:${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM} \
                scalableminds/webknossos:${CIRCLE_BRANCH}
              docker push scalableminds/webknossos:${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM}
              docker push scalableminds/webknossos:${CIRCLE_BRANCH}
              docker tag \
                scalableminds/webknossos-datastore:${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM} \
                scalableminds/webknossos-datastore:${CIRCLE_BRANCH}
              docker push scalableminds/webknossos-datastore:${CIRCLE_BRANCH}__${CIRCLE_BUILD_NUM}
              docker push scalableminds/webknossos-datastore:${CIRCLE_BRANCH}
              docker tag \
                scalableminds/webknossos-dev \
                scalableminds/webknossos-dev:$CIRCLE_BRANCH
              docker push scalableminds/webknossos-dev:$CIRCLE_BRANCH
            fi
            docker logout

      - run:
          name: Report coverage
          command: docker-compose run base yarn coverage
workflows:
  version: 2
  default:
    jobs:
      - build_test_deploy:
          filters:
            tags:
              only: /.*/
      - validate:
          requires:
            - build_test_deploy
      - smoke_tests:
          requires:
            - build_test_deploy
      - push:
          requires:
            - validate
            - smoke_tests
